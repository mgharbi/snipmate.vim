snippet template
	cmake_minimum_required(VERSION 2.8)
	# Project name
	project(${1:project})

	# Compiler flags: no optimization, gdb-friendly, warnings
	set(CMAKE_CXX_FLAGS "-O0 -ggdb3 -Wall")
	message("CMAKE_BUILD_TYPE is ${CMAKE_BUILD_TYPE}")
	message("Compiler flags: ${CMAKE_CXX_FLAGS}")

	# Find external packages
	#find_package(Boost COMPONENTS system filesystem REQUIRED)

	# Directories
	set(src "${CMAKE_CURRENT_SOURCE_DIR}/src")
	set(bin "${CMAKE_CURRENT_SOURCE_DIR}/bin")
	set(lib "${CMAKE_CURRENT_SOURCE_DIR}/lib")
	set(inc "${CMAKE_CURRENT_SOURCE_DIR}/include")

	add_subdirectory(src)
	include_directories(src)

	# Sources
	file(GLOB main_src *.cpp)
	#set(main_src main.c)

	add_executable(main ${main_src})
	target_link_libraries(main 
		#${OpenCV_LIBS}
		#${Boost_SYSTEM_LIBRARY}
		#${Boost_FILESYSTEM_LIBRARY}
	)

	set_target_properties(main PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${bin})

snippet opencv
	find_package(OpenCV REQUIRED)

snippet opencvlink
	target_link_libraries(${1:target} ${OpenCV_LIBS})

snippet exec
	add_executable(${1:exec} ${2:exec_sources})

snippet lib
	add_library(${1:lib} SHARED ${2:lib_sources} )

snippet link
	target_link_libraries(${1:target} ${2:lib})

snippet find
	find_package(${1:package} COMPONENTS ${2:component})

snippet out
	set_target_properties(${1:target} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${2:directory})

snippet subdir
	add_subdirectory(${1:subdir})

snippet inc
	include_directories(${1:dir})

snippet if
	if (${1:cond})
		${2:# do}
	else(${3:cond2})
		${4:# do}
	endif

snippet mess
	message(${1:message})
